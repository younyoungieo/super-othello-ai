---
alwaysApply: true
---

# MCPHub v3.0 개발 가이드라인 및 규칙

## 📋 필수 참조 문서 (ALWAYS CHECK FIRST)
프로젝트 작업 전 반드시 다음 문서들을 확인하고 최신 상태를 유지하세요:

### 🎯 프로젝트 상태 및 아키텍처
- `docs/mcphub-project-status.md` - 전체 프로젝트 현황, 완료된 기능, 진행 중인 작업
- `docs/database-schema.md` - 데이터베이스 스키마, 사용자 관리 시스템 (🚨 CRITICAL)
- `docs/mcphub-env-var-system.md` - 환경변수 자동화 시스템
- `docs/release-notes/` - 각 버전별 변경사항 및 기능
- `MCPHUB_MULTIUSER_SESSION_COMPLETE_GUIDE.md` - 다중 사용자 세션 시스템 완전 가이드

### 🔧 기술 문서
- `README.md` - 프로젝트 개요, 빠른 시작, 핵심 기능
- `docs/api-reference.md` - API 엔드포인트 명세
- `mcp_settings.json` - MCP 서버 설정 및 환경변수 템플릿

---

## 🔒 개발 원칙 (NON-NEGOTIABLE)

### 1. 문서 우선 원칙 (Documentation First)
**🚨 CRITICAL RULE: 코드 작성 전 반드시 문서 확인**

```
BEFORE ANY CODE CHANGE:
1. ✅ 관련 문서 읽기 (`docs/database-schema.md`, `docs/mcphub-project-status.md` 등)
2. ✅ 현재 구현 상태 파악
3. ✅ 기존 패턴과 일관성 확인
4. ⚠️  문서와 실제 코드 불일치 발견시 → 사용자에게 즉시 보고
```

### 2. 실시간 문서 업데이트 (Live Documentation)
**모든 변경사항은 즉시 문서에 반영해야 함**

#### 🔄 필수 업데이트 시점
- ✅ **기능 완성시**: 해당 기능 문서 업데이트
- ✅ **스키마 변경시**: `docs/database-schema.md` 즉시 업데이트
- ✅ **API 추가/수정시**: `docs/api-reference.md` 업데이트
- ✅ **환경변수 변경시**: `docs/mcphub-env-var-system.md` 업데이트
- ✅ **오류 해결시**: 해당 문서에 해결 방법 기록
- ✅ **새 브랜치/릴리즈시**: 릴리즈 노트 작성
- ✅ **소스코드 수정/삭제시**: `docs/development-history/` 디렉토리에 상세 기록 (🚨 NEW RULE)

#### 📝 문서 업데이트 체크리스트
```
[ ] 변경사항이 모든 관련 문서에 반영되었는가?
[ ] 버전 정보가 업데이트되었는가?
[ ] 새로운 기능의 사용 예시가 포함되었는가?
[ ] 기존 기능과의 호환성이 명시되었는가?
[ ] 마이그레이션 가이드가 필요한 경우 작성되었는가?
[ ] 소스코드 변경사항이 docs/development-history/에 상세 기록되었는가? (🚨 NEW)
[ ] 변경 전/후 코드 비교가 포함되었는가? (🚨 NEW)
[ ] 정확한 라인 번호가 기록되었는가? (🚨 NEW)
[ ] 작업 일시와 소요 시간이 기록되었는가? (🚨 NEW)
```

### 3. 문서 작성 표준 (Documentation Standards)
**🚨 MANDATORY: 모든 문서 작성 시 반드시 준수**

#### 📝 문서 이름 규칙
- **명확하고 직관적**: `upstream-session-store.md` → `mcp-session-management.md`
- **프로젝트 중심**: MCPHub 관점에서 이해하기 쉬운 이름
- **카테고리 구분**: `guides/`, `tutorials/`, `references/`, `operations/` 등

#### 🚨 소스코드 변경사항 상세 문서화 규칙 (NEW RULE)
**모든 소스코드 수정/삭제 작업은 반드시 상세하게 문서화해야 함**

##### 📅 문서화 시점 및 위치
- **시점**: 코드 변경 직후 즉시 (커밋 전)
- **위치**: `docs/development-history/` 디렉토리
- **파일명**: `YYYY-MM-DD-작업내용-요약.md` 형식
- **예시**: `2025-08-12-session-management-code-removal.md`

##### 📋 필수 문서화 내용
```
## 📅 작업 일시
- **시작**: YYYY-MM-DD HH:MM KST
- **완료**: YYYY-MM-DD HH:MM KST
- **총 소요 시간**: 약 X분

## 🎯 작업 목적
- **사용자 요청**: "사용자가 요청한 내용"
- **해결할 문제**: 구체적인 문제 설명
- **예상 결과**: 기대하는 결과

## 🔧 수정된 파일들
### 1. 파일명
- **파일**: `src/path/to/file.ts`
- **변경사항**: 구체적인 변경 내용
- **라인**: 정확한 라인 번호 (예: 라인 25-35)
- **변경 전 코드**: 변경 전 코드 스니펫
- **변경 후 코드**: 변경 후 코드 스니펫
- **변경 이유**: 왜 이렇게 변경했는지 설명

## 📊 작업 결과
- **성공 여부**: ✅ 성공 / ❌ 실패
- **영향받는 기능**: 변경으로 인해 영향받는 기능들
- **테스트 결과**: 테스트 수행 결과
- **부작용**: 예상치 못한 부작용이나 이슈

## 💡 학습된 내용
- **기술적 인사이트**: 새로 알게 된 기술적 내용
- **문제 해결 방법**: 유사한 문제 해결 시 참고할 내용
- **개선점**: 향후 개선할 수 있는 부분
```

##### 🚨 절대 금지사항
- **코드 변경 후 문서화 미완료 상태로 커밋**
- **라인 번호 없이 모호한 설명**
- **변경 전/후 코드 비교 없음**
- **변경 이유 설명 누락**
- **작업 일시 기록 누락**

#### 🔍 소스코드 라인 번호 포함 (CRITICAL)
**모든 기술 문서에 반드시 포함해야 함**:

```markdown
#### 코드 위치 및 라인 번호
- **파일**: `src/services/mcpService.ts`
- **주요 메서드**:
  - `getSessionId()` - 라인 25-35: Redis에서 세션 ID 조회
  - `setSessionId()` - 라인 37-47: Redis에 세션 ID 저장
  - `deleteSessionId()` - 라인 49-59: Redis에서 세션 ID 삭제

#### 로그 확인 포인트 (소스코드 위치)
- `📨 업스트림 요청에 세션 적용` - 라인 185
- `🪪 서버 세션 확인` - 라인 225  
- `💾 업스트림 세션 저장` - 라인 245
- `♻️ 세션 무효화 및 재연결` - 라인 290
```

#### 📋 문서 구조 표준
```markdown
# 문서 제목 (명확하고 직관적)

> 🎯 **핵심 목표**: 한 문장으로 요약

## 📋 개요
- 문서의 목적과 범위
- 대상 독자 명시

## 🔧 구현 세부사항
- **파일**: `src/path/to/file.ts`
- **라인 번호**: 구체적인 라인 범위
- **기능 설명**: 해당 코드의 역할

## 🎯 사용 예시
- 실제 사용 방법
- 코드 예제 포함

## 📚 관련 문서
- 다른 문서와의 연결
- 참조 링크
```

#### 🚨 문서 작성 시 필수 체크리스트
```
[ ] 문서 이름이 명확하고 직관적인가?
[ ] 소스코드 라인 번호가 포함되었는가?
[ ] 파일 경로가 정확히 명시되었는가?
[ ] 기능 설명이 구체적인가?
[ ] 사용 예시가 포함되었는가?
[ ] 관련 문서 링크가 업데이트되었는가?
[ ] docs/README.md에 링크가 추가되었는가?
```

### 4. 사용자 관리 시스템 (v3.0 완성)
- **DB 기반**: PostgreSQL + TypeORM 사용, JSON 파일 의존성 제거
- **권한 관리**: isAdmin, isActive 필드로 세밀한 제어
- **보호 로직**: 최소 1명 관리자 유지, 자기 자신 비활성화 방지
- **API 키 제한**: 비활성화된 사용자는 MCPHub Key 사용 불가

### 4. 환경변수 시스템 (완전 자동화)
- **템플릿 형식**: `${USER_*}` 패턴 사용 (예: `${USER_GITHUB_TOKEN}`)
- **자동 감지**: `src/utils/variableDetection.ts`의 `extractUserEnvVars()` 활용
- **보안**: 하드코딩된 토큰 절대 금지, GitHub Secret Scanning 준수
- **UI 자동 생성**: 환경변수 필드 동적 생성

### 5. MCP 프로토콜 (2025-06-18)
- **최신 버전**: 2025-06-18 프로토콜 버전 사용
- **서버 추상화**: 개별 툴 대신 서버 단위로 그룹화
- **동적 연결**: 하드코딩된 서버명 금지, `mcp_settings.json` 기반 동적 처리
- **에러 처리**: 서버 연결 실패 시에도 전체 시스템 안정성 유지

---

## 🗃️ 데이터베이스 스키마 규칙

### 현재 확정된 테이블 구조 (v3.0.0)
```sql
-- 🚨 CRITICAL: 이 구조를 반드시 준수하세요
user_groups:
  - servers TEXT[] NOT NULL  -- 배열 형태로 서버 ID 저장
  - name VARCHAR(100) NOT NULL
  - NO separate user_group_servers table needed
```

### 🚨 스키마 변경 시 필수 사항
1. **문서 먼저 확인**: `docs/database-schema.md` 정확한 구조 파악
2. **마이그레이션 스크립트**: `migrations/` 디렉토리에 SQL 파일 생성
3. **엔티티 동기화**: TypeORM 엔티티를 실제 DB 구조와 일치시킴
4. **문서 업데이트**: 변경사항을 `docs/database-schema.md`에 즉시 반영
5. **릴리즈 노트**: 마이그레이션 가이드 포함

---

## 🔧 개발 워크플로 (MANDATORY)

### 1. 작업 시작 전 (BEFORE CODING)
```bash
# 1. 최신 문서 확인
- docs/database-schema.md 읽기
- docs/mcphub-project-status.md 현재 상태 파악
- 관련 릴리즈 노트 확인

# 2. 현재 구현 상태 파악
- 기존 코드 패턴 확인
- API 엔드포인트 중복 여부 확인
- 데이터베이스 스키마와 엔티티 일치 여부 확인
```

### 2. 개발 중 (DURING CODING)
```bash
# 1. 일관성 유지
- 기존 네이밍 컨벤션 준수
- 에러 처리 패턴 일관성
- 타입 안전성 보장 (TypeScript strict mode)

# 2. 보안 검토
- 토큰 하드코딩 금지
- 사용자 권한 검증 포함
- 로그에서 민감정보 마스킹
```

### 3. 작업 완료 후 (AFTER CODING)
```bash
# 1. 문서 업데이트 (MANDATORY)
- 변경된 API: docs/api-reference.md 업데이트
- 스키마 변경: docs/database-schema.md 업데이트
- 새 기능: 해당 문서에 사용법 추가
- 오류 해결: 해결 방법 문서화
- 소스코드 변경사항: docs/development-history/에 상세 기록 (🚨 NEW)

# 2. 테스트 및 검증
- 기존 기능 영향도 확인
- 에러 핸들링 검증
- 권한 시스템 정상 작동 확인

# 3. 커밋 메시지
- 변경사항 명확히 기술
- 관련 문서 업데이트 포함 명시
- 개발 히스토리 문서 링크 포함 (🚨 NEW)
```

---

## 🚨 에러 처리 및 문제 해결

### 1. 문서-코드 불일치 발견시
```
🚨 IMMEDIATE ACTION REQUIRED:
1. 작업 중단
2. 사용자에게 불일치 내용 보고
3. 정확한 현재 상태 파악
4. 문서 업데이트 후 작업 재개
```

### 2. TypeORM 스키마 동기화 오류
```bash
# 1. 현재 DB 스키마 확인
psql -d mcphub -c "\d table_name"

# 2. 엔티티와 비교
src/db/entities/EntityName.ts 확인

# 3. 불일치 시 엔티티 수정 (DB 우선)
# 4. 문서 업데이트
```

### 3. MCP 서버 연결 오류
```bash
# 1. mcp_settings.json 설정 확인
# 2. 환경변수 템플릿 형식 검증
# 3. 사용자별 토큰 설정 상태 확인
# 4. 오류 해결 후 문서에 해결 방법 기록
```

---

## 📁 프로젝트 구조 규칙

### 필수 디렉토리 구조
```
MCPHub/
├── src/                      # 백엔드 소스코드
│   ├── controllers/         # API 컨트롤러
│   ├── services/           # 비즈니스 로직 (MCP 서버 관리)
│   ├── db/                 # 데이터베이스 엔티티/리포지토리
│   ├── utils/              # 환경변수 감지 등 유틸리티
│   └── routes/             # API 라우팅
├── frontend/               # React 프론트엔드
├── docs/ 📋               # 🚨 CRITICAL: 항상 최신 유지!
├── migrations/             # DB 마이그레이션 스크립트
└── mcp_settings.json      # MCP 서버 설정
```

### 문서 구조 규칙
- **docs/**: 모든 기술 문서
- **release-notes/**: 버전별 변경사항
- **루트 문서**: 사용자 가이드 (README.md, COMPLETE_GUIDE.md)

### 개발 히스토리 디렉토리 구조 (🚨 NEW)
```
docs/development-history/
├── README.md                    # 개발 히스토리 관리 시스템 가이드
├── YYYY-MM-DD-작업내용-요약.md  # 일별 상세 작업 기록
├── YYYY-MM-DD-작업내용-요약.md  # 일별 상세 작업 기록
└── ...
```

#### 📋 개발 히스토리 파일 명명 규칙
- **형식**: `YYYY-MM-DD-작업내용-요약.md`
- **예시**: 
  - `2025-08-12-session-management-code-removal.md`
  - `2025-08-12-github-mcp-connection-fix.md`
  - `2025-08-12-docker-build-issues-resolution.md`
- **특징**: 날짜별로 정렬되어 시간순 추적 가능
- **장점**: MD 파일이 많아져도 체계적 관리 가능

---

## 🎯 코드 리뷰 체크리스트

### ✅ 필수 확인사항
- [ ] 관련 문서 확인 완료
- [ ] 환경변수 하드코딩 없음
- [ ] 사용자 권한/활성화 상태 확인
- [ ] 에러 처리 포함
- [ ] 타입 안전성 보장
- [ ] 기존 패턴과 일관성
- [ ] 보안 취약점 없음
- [ ] **문서 업데이트 완료** 🚨
- [ ] **소스코드 변경사항 상세 문서화 완료** 🚨 (🚨 NEW)
- [ ] **개발 히스토리 문서에 라인 번호 포함** 🚨 (🚨 NEW)

### 🚨 절대 금지사항
- 하드코딩된 API 토큰/비밀번호
- 사용자 권한 검증 누락
- 문서 없이 코드 변경
- 스키마 변경 후 문서 미업데이트
- TypeORM 엔티티와 실제 DB 불일치
- 직접적인 DB 쿼리 (Repository 패턴 사용)
- **소스코드 변경사항 문서화 없이 커밋** (🚨 NEW)
- **라인 번호 없이 모호한 코드 변경 설명** (🚨 NEW)
- **변경 전/후 코드 비교 없이 문서화** (🚨 NEW)

---

## 📊 릴리즈 관리

### 버전 업데이트 시 필수사항
1. **package.json** 버전 업데이트
2. **README.md** 버전 및 기능 업데이트
3. **docs/release-notes/** 새 릴리즈 노트 작성
4. **docs/mcphub-project-status.md** 상태 업데이트
5. **마이그레이션 가이드** 필요시 작성

### 브랜치 전략
- **main**: 안정 버전
- **release-X**: 릴리즈 준비
- **feature/**: 개별 기능 개발

---

## 🔍 문제 발생시 대응 절차

### 1. 문서 관련 문제
```
1. 문서와 코드 불일치 → 즉시 사용자 보고
2. 스키마 문서 오류 → DB 실제 상태 확인 후 문서 수정
3. API 문서 누락 → 즉시 문서 추가
```

### 2. 기술적 문제
```
1. TypeORM 오류 → 엔티티와 DB 스키마 비교
2. MCP 연결 오류 → 설정 파일 및 토큰 확인
3. 권한 오류 → 사용자 상태 및 권한 확인
```

### 3. 해결 후 필수사항
```
1. 해결 방법 문서화
2. 재발 방지를 위한 문서 개선
3. 관련 가이드 업데이트
```

---

## 🎯 성공적인 MCPHub 개발을 위한 마인드셋

### 핵심 원칙
1. **문서는 코드와 동등한 중요성** - 문서 없는 코드는 불완전한 코드
2. **일관성이 생산성을 만든다** - 기존 패턴 준수
3. **보안은 선택이 아닌 필수** - 모든 단계에서 보안 고려
4. **사용자 경험 우선** - 관리자와 일반 사용자 모두 고려

### 🚀 지속적 개선
- 매 작업마다 문서 품질 향상
- 코드와 문서의 완벽한 동기화 유지
- 사용자 피드백 즉시 반영
- 시스템 안정성과 확장성 지속 개선

---

**이 규칙들을 철저히 준수하여 MCPHub의 품질과 유지보수성을 최고 수준으로 유지하세요!**

**📋 Remember: 문서 우선, 일관성 유지, 보안 강화, 사용자 경험 최적화**